unit TestmsSerializeController;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  msSerializeController,
  Data.DBXJSONReflect,
  JSON,
  FMX.Objects,
  msDiagramm,
  msShape
  ;

type
  // Test methods for class TmsSerializeController

  TestTmsSerializeController = class abstract(TTestCase)
  strict private
    FmsDiagramm: TmsDiagramm;
    FImage: TImage;
  protected
    function ShapeClass: RmsShape; virtual; abstract;
    procedure SaveDiagrammAndCheck(aDiagramm: TmsDiagramm);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSerialize;
    procedure TestDeSerialize;
  end;//TestTmsSerializeController

  TestSerializeTriangle = class(TestTmsSerializeController)
  protected
    function ShapeClass: RmsShape; override;
  end;//TestSerializeTriangle

  TestSerializeRectangle = class(TestTmsSerializeController)
  protected
    function ShapeClass: RmsShape; override;
  end;//TestSerializeRectangle

  TestSerializeCircle = class(TestTmsSerializeController)
  protected
    function ShapeClass: RmsShape; override;
  end;//TestSerializeCircle

implementation

 uses
  System.SysUtils,
  msTriangle,
  msRectangle,
  msCircle,
  System.Types,
  System.Classes
  ;

function TestSerializeTriangle.ShapeClass: RmsShape;
begin
 Result := TmsTriangle;
end;

function TestSerializeRectangle.ShapeClass: RmsShape;
begin
 Result := TmsRectangle;
end;

function TestSerializeCircle.ShapeClass: RmsShape;
begin
 Result := TmsCircle;
end;

 const
  c_DiagramName = 'First Diagram';

procedure TestTmsSerializeController.SetUp;
begin
 FImage:= TImage.Create(nil);
 FmsDiagramm := TmsDiagramm.Create(FImage, c_DiagramName);
end;

procedure TestTmsSerializeController.TearDown;
begin
 FreeAndNil(FImage);
 FreeAndNil(FmsDiagramm);
end;

procedure TestTmsSerializeController.SaveDiagrammAndCheck(aDiagramm: TmsDiagramm);
var
  l_FileSerialized, l_FileEtalon: TStringList;
  l_FileNameTest : String;
  l_FileNameEtalon : String;
begin
 l_FileNameTest := ClassName + '_'+ Name + '.json';
 l_FileNameEtalon := l_FileNameTest + '.etalon.json';
 TmsSerializeController.Serialize(l_FileNameTest, FmsDiagramm);
  // TODO: Validate method results
 l_FileSerialized := TStringList.Create;
 l_FileSerialized.LoadFromFile(l_FileNameTest);

 l_FileEtalon := TStringList.Create;
 l_FileEtalon.LoadFromFile(l_FileNameEtalon);

 CheckTrue(l_FileEtalon.Equals(l_FileSerialized));

 FreeAndNil(l_FileSerialized);
 FreeAndNil(l_FileEtalon);
end;

procedure TestTmsSerializeController.TestSerialize;
begin
 FmsDiagramm.ShapeList.Add(ShapeClass.Create(TmsMakeShapeContext.Create(TPointF.Create(10, 10),nil)));
 SaveDiagrammAndCheck(FmsDiagramm);
end;

procedure TestTmsSerializeController.TestDeSerialize;
var
  ReturnValue: TmsDiagramm;
  l_FileNameTest: string;
begin
 l_FileNameTest := ClassName + '_'+ 'TestSerialize' + '.json';
  // TODO: Setup method call parameters
  ReturnValue := TmsSerializeController.DeSerialize(l_FileNameTest);
  FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestSerializeTriangle.Suite);
  RegisterTest(TestSerializeRectangle.Suite);
  RegisterTest(TestSerializeCircle.Suite);
end.

