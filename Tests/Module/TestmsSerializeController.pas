unit TestmsSerializeController;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  msSerializeController,
  Data.DBXJSONReflect,
  JSON,
  FMX.Objects,
  msDiagramm,
  msShape
  ;

type
  TmsDiagrammCheck = reference to procedure (aDiagramm : TmsDiagramm);

  TestTmsSerializeController = class abstract(TTestCase)
  protected
    function ShapeClass: RmsShape; virtual; abstract;
    function MakeFileName(const aTestName: String; aShapeClass: RmsShape): String;
    procedure SaveDiagrammAndCheck(aShapeClass: RmsShape; aDiagramm: TmsDiagramm);
    procedure CreateDiagrammWithShapeAndSaveAndCheck(aShapeClass: RmsShape);
    procedure DeserializeDiargammAndCheck(aCheck: TmsDiagrammCheck);
  published
    procedure TestSerialize;
    procedure TestDeSerialize;
    procedure TestDeSerializeViaShapeCheck;
  end;//TestTmsSerializeController

  TestSerializeTriangle = class(TestTmsSerializeController)
  protected
    function ShapeClass: RmsShape; override;
  end;//TestSerializeTriangle

  TestSerializeRectangle = class(TestTmsSerializeController)
  protected
    function ShapeClass: RmsShape; override;
  end;//TestSerializeRectangle

  TestSerializeCircle = class(TestTmsSerializeController)
  protected
    function ShapeClass: RmsShape; override;
  end;//TestSerializeCircle

  TestSerializeRoundedRectangle = class(TestTmsSerializeController)
  protected
    function ShapeClass: RmsShape; override;
  end;//TestSerializeRoundedRectangle

implementation

 uses
  System.SysUtils,
  msTriangle,
  msRectangle,
  msCircle,
  msRoundedRectangle,
  System.Types,
  System.Classes,
  Winapi.Windows
  ;

function TestSerializeTriangle.ShapeClass: RmsShape;
begin
 Result := TmsTriangle;
end;

function TestSerializeRectangle.ShapeClass: RmsShape;
begin
 Result := TmsRectangle;
end;

function TestSerializeCircle.ShapeClass: RmsShape;
begin
 Result := TmsCircle;
end;

function TestSerializeRoundedRectangle.ShapeClass: RmsShape;
begin
 Result := TmsRoundedRectangle;
end;

 const
  c_DiagramName = 'First Diagram';

function TestTmsSerializeController.MakeFileName(const aTestName: String; aShapeClass: RmsShape): String;
begin
 Result := ExtractFilePath(ParamStr(0)) + ClassName + '_' + aTestName + '_' + aShapeClass.ClassName + '.json';
end;

procedure TestTmsSerializeController.SaveDiagrammAndCheck(aShapeClass: RmsShape; aDiagramm: TmsDiagramm);
var
 l_FileSerialized, l_FileEtalon: TStringList;
 l_FileNameTest : String;
 l_FileNameEtalon : String;
begin
 l_FileNameTest := MakeFileName(Name, aShapeClass);
 TmsSerializeController.Serialize(l_FileNameTest, aDiagramm);

 l_FileNameEtalon := l_FileNameTest + '.etalon.json';
 if FileExists(l_FileNameEtalon) then
 begin
  l_FileSerialized := TStringList.Create;
  l_FileSerialized.LoadFromFile(l_FileNameTest);

  l_FileEtalon := TStringList.Create;
  l_FileEtalon.LoadFromFile(l_FileNameEtalon);

  CheckTrue(l_FileEtalon.Equals(l_FileSerialized));

  FreeAndNil(l_FileSerialized);
  FreeAndNil(l_FileEtalon);
 end
 else
 begin
  CopyFile(PWideChar(l_FileNameTest),PWideChar(l_FileNameEtalon),True);
 end;
end;

procedure TestTmsSerializeController.CreateDiagrammWithShapeAndSaveAndCheck(aShapeClass: RmsShape);
var
 l_Diagramm: TmsDiagramm;
 l_Image: TImage;
begin
 l_Image:= TImage.Create(nil);
 try
  l_Diagramm := TmsDiagramm.Create(l_Image, c_DiagramName);
  try
   l_Diagramm.ShapeList.Add(aShapeClass.Create(TmsMakeShapeContext.Create(TPointF.Create(10, 10),nil)));
   SaveDiagrammAndCheck(aShapeClass, l_Diagramm);
  finally
   FreeAndNil(l_Image);
  end;
 finally
  FreeAndNil(l_Diagramm);
 end;//try..finally
end;

procedure TestTmsSerializeController.TestSerialize;
begin
 CreateDiagrammWithShapeAndSaveAndCheck(ShapeClass);
end;

procedure TestTmsSerializeController.DeserializeDiargammAndCheck(aCheck: TmsDiagrammCheck);
var
 l_Diagramm : TmsDiagramm;
 l_FileNameTest: string;
begin
 l_FileNameTest := MakeFileName('TestSerialize', ShapeClass);
 l_Diagramm := TmsSerializeController.DeSerialize(l_FileNameTest);
 try
  aCheck(l_Diagramm);
 finally
  FreeAndNil(l_Diagramm);
 end;//try..finally
end;

procedure TestTmsSerializeController.TestDeSerialize;
begin
 DeserializeDiargammAndCheck(
  procedure (aDiagramm: TmsDiagramm)
  begin
   SaveDiagrammAndCheck(ShapeClass, aDiagramm);
  end
 );
end;

procedure TestTmsSerializeController.TestDeSerializeViaShapeCheck;
begin
 DeserializeDiargammAndCheck(
  procedure (aDiagramm: TmsDiagramm)
  begin
   Check(aDiagramm.ShapeList <> nil);
   Check(aDiagramm.ShapeList.Count = 1);
   Check(aDiagramm.ShapeList[0].HackInstance.ClassType = ShapeClass);
  end
 );
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestSerializeTriangle.Suite);
  RegisterTest(TestSerializeRectangle.Suite);
  RegisterTest(TestSerializeCircle.Suite);
  RegisterTest(TestSerializeRoundedRectangle.Suite);
end.

