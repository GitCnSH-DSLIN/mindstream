-2. Пример парсера лежит тут - mindstream\Scripting\Script.Parser.pas. Его надо брать за основу.
-1. Реализованный парсер конечно же есть. И не один. Но мы будем писать НОВЫЙ.Тому есть много ВЕСКИХ причин.
0. Токен - базовый элемент грамматики языка.
1. Все "токены" разделяются пробелами или табуляциями. Или новой строкой (#13#10 или #10 или #13). Пример:
 1. A B C - три токена - A B C
 2. A B + - три токена - A B +
 3. A B+ - два токена - A B+
 4. A+ B - два токена - A+ B
 5. A+B - один токен - A+B
1a. Сначала парсер бъёт входной поток по пробелам или новым строкам, а потом только анализирует содержимое полученных токенов.
2. Токен // - определяет строковый комментарий. Парсер должен пропустить все символы от // до конца строки (#13#10 или #10 или #13).
3. Токен /* - определяет блочный комментарий. Парсер должен пропустить все символы от /* до */.
4. Токен false - представляет собой булевское значение false.
5. Токен true - представляет собой булевское значение true.
6. Конструкция вида [x] далее означает повторение значения x от 0 до N. Где x - может принимать ЛЮБОЕ значение. К токенам это не относится. Это скажем так - мета-язык для описания токенов.
6a. Также договоримся, что a - это символ, а N - цифра.
7. Токен вида '[a]' - представляет собою строку. a - может быть ЛЮБЫМ сиволом кроме ', включая #13 и 10. Пример:
 1. 'abc' - строка abc.
 2. 'abc d' - строка abc d.
 3. 'ab
 c' - строка abc#13#10c.
8. Поддчеркну! Строки бывают МНОГОСТРОЧНЫМИ. Как в примере 7.3.
9. Токен вида [[#[N]]['[a]'][#[N]]] - также даёт строку. Пример:
 1. #12#13#14 - даёт строку #12#13#14.
 2. #12#13#14'a' - даёт строку #12#13#14a.
 3. #12#13#14'ab' - даёт строку #12#13#14ab.
 3. #12#13#14'ab'#15 - даёт строку #12#13#14ab#15.
 4. #12#13#14'ab'#15'cd' - даёт строку #12#13#14ab#15cd.
10. Договоримся, что конструкция вида (x) - далее означает повторение значения x от 1 до N.