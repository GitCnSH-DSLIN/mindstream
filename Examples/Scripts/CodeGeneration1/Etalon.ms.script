PROGRAM Etalon.ms.script

USES
 axiom_push.ms.dict
;

USES
 io.ms.dict
;

USES
 DumpStack.ms.dict
;

USES
 SaveVarAndDo.ms.dict
;

USES
 Testing.ms.dict
;

USES
 CompileTimeVar.ms.dict
;

Test&Dump Etalon.ms.script.test
 
 FILE VAR g_OutFile
 %REMARK 'Текущий файл'
 ( nil >>> g_OutFile )
 INTEGER VAR g_EtalonLevel
 ( 0 >>> g_EtalonLevel )
 ARRAY VAR g_EtalonPath
 ( [ 0 ] >>> g_EtalonPath )

 CONST cCompareUtilCmd 'q:\afc.cmd'
 %REMARK 'Путь к утилите сравнения'

 PROCEDURE Etalon.do
   IN aLambda

  CONST cPathSep '\'

  BOOLEAN FUNCTION FileIsEmpty
    STRING IN aFileName
   aFileName FileSize 0 == >>> Result
  ; // FileIsEmpty
  
  PROCEDURE DeleteEmptyFile
    STRING IN aFileName
   aFileName FileIsEmpty ? (
    aFileName sysutils:FileExists ? (
     aFileName DeleteFile DROP
    ) // aFileName sysutils:FileExists
   ) // aFileName FileSize 0 ==
  ; // DeleteEmptyFile

  PROCEDURE Out
    IN aValue
   g_OutFile IsNil ?FAIL 'Файл для вывода не открыт'
   aValue ToPrintable g_OutFile File:WriteLn
  ; // Out

  STRING VAR l_FileName
  STRING VAR l_CurrentDir
  script:FileName sysutils:ExtractFilePath >>> l_CurrentDir
  script:FileName sysutils:ExtractFileName >>> l_FileName

  if ( l_CurrentDir IsNil ) then
  begin
   sysutils:GetCurrentDir >>> l_CurrentDir
  end // l_CurrentDir IsNil

  [ 
    l_FileName 
    [ g_EtalonPath .for> IntToStr ] '.' strings:CatSep
    '.prn' 
  ] strings:Cat >>> l_FileName

  STRING VAR l_OutFileName
  l_FileName >>> l_OutFileName
  l_OutFileName '.etalon' Cat >>> l_OutFileName

  [ l_CurrentDir 'Etalons' l_FileName ] cPathSep strings:CatSep >>> l_FileName

  STRING VAR l_OutDir
  [ l_CurrentDir 'Out' ] cPathSep strings:CatSep >>> l_OutDir
  l_OutDir sysutils:ForceDirectories ?ASSURE [ 'Не удалось создать директорию ' l_OutDir ]
  [ l_OutDir l_OutFileName ] cPathSep strings:CatSep >>> l_OutFileName

  TF g_OutFile (
   l_OutFileName File:OpenWrite >>> g_OutFile
   DumpStackTo (
    g_EtalonPath
   ) Out
   DumpStackTo (
    aLambda DO 
   ) Out
   nil >>> g_OutFile
  ) // TF g_OutFile

  if ( l_FileName sysutils:FileExists ) then
  begin
   '' l_FileName l_OutFileName CompareFiles ! ? (
   'got' Msg
/*{    cCompareUtilCmd sysutils:FileExists ?ASSURE [ 'Не найдена утилита сравнения: ' cCompareUtilCmd ]
    STRING VAR l_Compare
    [ cCompareUtilCmd ' ' l_FileName ' ' l_OutFileName ] strings:Cat >>> l_Compare
    l_Compare WinExec
    %REMARK 'Вызываем внешнюю утилиту сравнения файлов'}*/
   )
  end // l_FileName sysutils:FileExists
  else
  begin
   $20 l_FileName l_OutFileName CopyFile
  end // l_FileName sysutils:FileExists
  
  l_FileName DeleteEmptyFile
  l_OutFileName DeleteEmptyFile

 ; // Etalon.do

 PROCEDURE Etalon
   ^ IN aLambda

  TF g_EtalonLevel (
   INC g_EtalonLevel
   INTEGER VAR l_Level
   g_EtalonPath Array:Count >>> l_Level
   BOOLEAN VAR l_SameLevel
   l_Level g_EtalonLevel == >>> l_SameLevel
   if l_SameLevel then
   begin
    DEC l_Level
    INTEGER VAR l_EtalonCount
    l_Level g_EtalonPath Array:Item >>> l_EtalonCount
    aLambda Etalon.do
    INC l_EtalonCount
    l_Level g_EtalonPath Array:Item := l_EtalonCount
   end // l_SameLevel
   else
   begin
    TF g_EtalonPath (
     0 >>>[] g_EtalonPath
     aLambda Etalon.do
    ) // TF g_EtalonPath
   end // l_SameLevel
  ) 
 ; // Etalon

 Etalon ( script:FileName sysutils:ExtractFileName )
 Etalon ( 1 2 + )
 Etalon 'Hello world'
 Etalon ()
 Etalon []
 Etalon 1
 Etalon 'Another string'
 Etalon ''

 Etalon (
  'Root'
  Etalon 'Nested1'
  Etalon ( 
   'Nested2'
   Etalon 'Nested2.1'
   Etalon 'Nested2.2'
  )
 )
; // Etalon.ms.script.test

Etalon.ms.script.test
