USES
 io.ms.dict
 Object.ms.dict
 Testing.ms.dict
;

USES
 axiom:WordInfo
;

Test&Dump ObjectTest

 ClassOf Object DumpElement

 ClassOf Object pop:Word:Name Print

 Object VAR l_Obj
 l_Obj := Object:new

 l_Obj .Print
 l_Obj .ClassName Print

 //@ l_Obj pop:Word:Info pop:WordInfo:ValueTypes Print
 //@ l_Obj pop:Word:Info pop:WordInfo:ValueTypes pop:ValueTypes:Name Print
 l_Obj .ClassName Print
 ClassOf Object pop:Word:Name Print

 '--------' Print

 l_Obj .InstanceSize Print

 ClassOf Object VMTFieldOffset VMT .

 ClassOf Object pop:Word:Name Print
 ClassOf Object pop:Word:Name Print

 class Object1
  constructor new ( )
//   Object:new >>> Result
   new[ ] >>> Result 
  ; // new
 class-end // Object1

 Object1 VAR l_Obj1
 l_Obj1 := Object1:new

 l_Obj1 .Print
 l_Obj1 .ClassName Print

 l_Obj1 .ClassName Print

 '--------' Print

 l_Obj1 .InstanceSize Print
 
 ClassOf Object1 VMTFieldOffset VMT .

 class Object2
  INTEGER member FakeField
  INTEGER readonly FakeField read FakeField
  constructor new ( )
   new[ 256 ] >>> Result 
  ; // new
 class-end // Object2

/*{ Object2 VAR l_Obj2
 l_Obj2 := Object2:new

 l_Obj2 .Print
 l_Obj2 .ClassName Print

 l_Obj2 .ClassName Print

 '--------' Print

 l_Obj2 .InstanceSize Print

 ClassOf Object2 VMTFieldOffset VMT .
 ClassOf Object2 VMTFieldOffset FakeField .

 //l_Obj2 .FakeField Print}*/

; // ObjectTest

ObjectTest