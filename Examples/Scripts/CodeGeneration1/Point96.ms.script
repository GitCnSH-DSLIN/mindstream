USES
 macro.ms.dict
 core.ms.dict
 NoCapsLock.ms.dict
 params.ms.dict
 integer.ms.dict
 Object.ms.dict
 Testing.ms.dict
;

Test&Dump PointTest

ClassOf Object DumpElement

INTEGER type Pixel
// - пиксель
List type PixelList
// - список пикселей

class Point

Pixel member X
Pixel member Y

constructor : ( 
 Pixel in_param aX 
 Pixel in_param aY 
)
 new[ aX aY ] >>> Self
; // :

constructor 0 ( )
 Point:: 0 0 >>> Self
; // 0

constructor XY ( 
 //PixelList 
  in_param aPoint
)
 array var Points
 [ aPoint ] >>> Points
 Point:: ( Points FieldByOffset 0 ) ( Points FieldByOffset 1 ) >>> Self
; // XY

Pixel readonly X read X

Pixel readonly Y read Y

constructor OF ( 
 Point in_param aPoint
)
 Point:: ( aPoint .X ) ( aPoint .Y ) >>> Self
; // OF

Point method +
 Point right aPoint

 Point:: ( Self .X (+) ( aPoint .X ) ) ( Self .Y (+) ( aPoint .Y ) ) >>> Result
; // +

Point method Neg
 Point:: Neg ( Self .X ) Neg ( Self .Y ) >>> Result
; // Neg

Point method -
 Point right aPoint

 Point:OF ( Self .+ ( aPoint .Neg ) ) >>> Result
; // -

OVERRIDE STRING method ToPrintable
 [ '( ' 'X: ' Self .X ToPrintable ', Y: ' Self .Y ToPrintable ' )' ] strings:Cat >>> Result
; // ToPrintable

OVERRIDE void method Print
 Self .ToPrintable Print
; // Print

class-end // Point

class Rectangle

Point member TopLeft
Point member BottomRight

Point readonly TopLeft read TopLeft

Point readonly BottomRight read BottomRight

constructor : ( 
 Point in_param aTopLeft
 Point in_param aBottomRight
)
 new[ aTopLeft aBottomRight ] >>> Self
; // :

OVERRIDE STRING method ToPrintable
 [ '( ' 'TopLeft: ' Self .TopLeft .ToPrintable ', BottomRight: ' Self .BottomRight .ToPrintable ' )' ] strings:Cat >>> Result
; // ToPrintable

OVERRIDE void method Print
 Self .ToPrintable Print
; // Print

class-end // Rectangle

class Foo
class-end // Foo

class Bar
class-end // Bar

ClassOf Point DumpElement
ClassOf Rectangle DumpElement

c:Object:Offset:VMT .
c:Point:Offset:VMT .
c:Rectangle:Offset:VMT .

ClassOf Object VMTFieldOffset VMT .

ClassOf Point VMTFieldOffset VMT .
ClassOf Point VMTFieldOffset X .
ClassOf Point VMTFieldOffset Y .

ClassOf Rectangle VMTFieldOffset VMT .
ClassOf Rectangle VMTFieldOffset TopLeft .
ClassOf Rectangle VMTFieldOffset TopLeft .
ClassOf Rectangle VMTFieldOffset BottomRight .

ClassOf Object .InstanceSize .
ClassOf Point .InstanceSize .
ClassOf Rectangle .InstanceSize .
ClassOf Foo .InstanceSize .
ClassOf Bar .InstanceSize .

Point:: 0 0 Point:Print
// - так работает

Point:: 0 0 |> Print
// - теперь и “ј  работает

Point var P1
Point var P2
Point var P3
Point var P4
Point var P5
Point var P6
Point var P7
Point var P8
Point var P9
Point var P10
Point var P11

P1 := Point:0
P2 := Point:0
P3 := Point:: 1 1
P4 := Point:XY ( 2 2 )
P5 := Point:OF P4
P6 := ( P3 .+ P4 )
P7 := ( P3 .- P4 )
P8 := ( P4 .- P3 )
P9 := ( P4 .Neg )
P10 := ( P3 .Neg )
P11 := Point:XY ( -2 2 )

Object var O1
O1 := P1
O1 .Print
// - тут вообще говор€ надо звать ¬»–“”јЋ№Ќџ… метод, но мы пока так не умеем

O1 .InstanceSize Print

array var l_Points

[ P1 P2 P3 P4 P5 P6 P7 P8 P9 P10 P11 ] >>> l_Points

P1 .InstanceSize Print
P1 Point:InstanceSize Print

l_Points ==> (
 Point IN aPt 
 aPt .Print
)
l_Points ==> (
 Point IN aPt 
 aPt .X Print 
)
l_Points ==> ( 
 Point IN aPt 
 aPt .Y Print 
)
l_Points ==> ( 
 Point IN aPt 
 aPt .class Print 
)
l_Points ==> ( 
 Point IN aPt 
 aPt .ClassName Print 
)
l_Points ==> ( 
 Point IN aPt 
 aPt .class %G ==> ( 
  ObjectClass IN aClass
  aClass .ClassName Print 
 ) 
)

Rectangle var R1
Rectangle var R2
R1 := Rectangle:: P1 P4
R2 := Rectangle:: P6 P7

R1 .InstanceSize Print

array var l_Rectangles
[ R1 R2 ] >>> l_Rectangles

l_Rectangles ==> (
 Rectangle IN aRt
 aRt .Print
)
l_Rectangles ==> ( 
 Rectangle IN aRt
 aRt .class Print 
)
l_Rectangles ==> ( 
 Rectangle IN aRt
 aRt .ClassName Print 
)
l_Rectangles ==> ( 
 Rectangle IN aRt 
 aRt .class %G ==> ( 
  ObjectClass IN aClass
  aClass .ClassName Print 
 ) 
)

'Hello ' (+) 'world' Print

1 (+) 2 Print
10 (+) 20 Print
0 (-) 10 Print
Neg 10 Print
Neg -10 Print

; // PointTest

PointTest