USES
 macro.ms.dict
 core.ms.dict
 NoCapsLock.ms.dict
 params.ms.dict
 integer.ms.dict
 Object.ms.dict
 Testing.ms.dict
;

Test&Dump PointTest

@ _:Object DumpElement

INTEGER type Pixel
// - пиксель
List type PixelList
// - список пикселей

class Point

Pixel member X
Pixel member Y
members-end

constructor :
 Pixel right aX
 Pixel right aY
 new[ aX aY ] =: Result
; // :

constructor 0
 Point:: 0 0 =: Result
; // 0

constructor XY
 PixelList right aPoint
 array var Points
 [ aPoint ] =: Points
 Point:: ( Points FieldByOffset 0 ) ( Points FieldByOffset 1 ) =: Result
; // XY

Pixel readonly X read X

Pixel readonly Y read Y

constructor OF
 Point right aPoint
 Point:: ( aPoint Point:X ) ( aPoint Point:Y ) =: Result
; // OF

Point method +
 Point right aPoint

 Point:: ( Self |> X (+) ( aPoint Point:X ) ) ( Self |> Y (+) ( aPoint Point:Y ) ) =: Result
; // +

Point method Neg
 Point:: Neg ( Self |> X ) Neg ( Self |> Y ) =: Result
; // Neg

Point method -
 Point right aPoint

 Point:OF ( Self |> + ( aPoint Point:Neg ) ) =: Result
; // -

OVERRIDE STRING method ToPrintable
 [ '( ' 'X: ' Self |> X ToPrintable ', Y: ' Self |> Y ToPrintable ' )' ] strings:Cat =: Result
; // ToPrintable

OVERRIDE void method Print
 Self |> ToPrintable Print
; // Print

class-end // Point

class Rectangle

Point member TopLeft
Point member BottomRight
members-end

Point readonly TopLeft read TopLeft

Point readonly BottomRight read BottomRight

constructor :
 Point right aTopLeft
 Point right aBottomRight
 new[ aTopLeft aBottomRight ] =: Result
; // :

OVERRIDE STRING method ToPrintable
 [ '( ' 'TopLeft: ' Self |> TopLeft |> ToPrintable ', BottomRight: ' Self |> BottomRight |> ToPrintable ' )' ] strings:Cat =: Result
; // ToPrintable

OVERRIDE void method Print
 Self |> ToPrintable Print
; // Print

class-end // Rectangle

Point var P1
Point var P2
Point var P3
Point var P4
Point var P5
Point var P6
Point var P7
Point var P8
Point var P9
Point var P10
Point var P11

P1 := Point:0
P2 := Point:0
P3 := Point:: 1 1
P4 := Point:XY ( 2 2 )
P5 := Point:OF P4
P6 := ( P3 |> + P4 )
P7 := ( P3 |> - P4 )
P8 := ( P4 |> - P3 )
P9 := ( P4 |> Neg )
P10 := ( P3 |> Neg )
P11 := Point:XY ( -2 2 )

Object var O1
O1 := P1
O1 |> Print
// - тут вообще говор€ надо звать ¬»–“”јЋ№Ќџ… метод, но мы пока так не умеем

array var l_Points

[ P1 P2 P3 P4 P5 P6 P7 P8 P9 P10 P11 ] =: l_Points

l_Points ==> (
 Point IN aPt 
 aPt |> Print
)
l_Points ==> (
 Point IN aPt 
 aPt |> X Print 
)
l_Points ==> ( 
 Point IN aPt 
 aPt |> Y Print 
)
l_Points ==> ( 
 Point IN aPt 
 aPt |> class Print 
)
l_Points ==> ( 
 Point IN aPt 
 aPt |> ClassName Print 
)
l_Points ==> ( 
 Point IN aPt 
 aPt |> class %G ==> ( getClassName Print ) 
)

Rectangle var R1
Rectangle var R2
R1 := Rectangle:: P1 P4
R2 := Rectangle:: P6 P7

array var l_Rectangles
[ R1 R2 ] =: l_Rectangles

l_Rectangles ==> (
 Rectangle IN aRt
 aRt |> Print
)
l_Rectangles ==> ( 
 Rectangle IN aRt
 aRt |> class Print 
)
l_Rectangles ==> ( 
 Rectangle IN aRt
 aRt |> ClassName Print 
)
l_Rectangles ==> ( 
 Rectangle IN aRt 
 aRt |> class %G ==> ( getClassName Print ) 
)

'Hello ' (+) 'world' Print

'Hello ' (+) 'world' Print

'Hello ' (+) 'world' Print

1 (+) 2 Print
10 (+) 20 Print
0 (-) 10 Print
Neg 10 Print
Neg -10 Print

; // PointTest

PointTest