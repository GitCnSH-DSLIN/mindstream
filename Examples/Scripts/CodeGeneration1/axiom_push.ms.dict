UNIT axiom_push.ms.dict

USES
 axiom:Tl3TokenType
;

PROCEDURE axiom:PushSymbol
 LINK ^ IN aSymbol
 %SUMMARY 'Запихивает во входной поток парсера имя слова aSymbol' ;
 aSymbol pop:Word:Name Ctx:Parser:PushSymbol
; // axiom:PushSymbol

PROCEDURE Ctx:Parser:PushLeftDottedSymbol
 STRING IN aValue
 %SUMMARY 'Запихивает во входной поток парсера aValue предварённое точкой' ;
 '.' (+) aValue Ctx:Parser:PushSymbol
; // Ctx:Parser:PushLeftDottedSymbol

INTEGER STRING TYPE TOKEN
INTEGER TYPE TOKEN_TYPE
 // - вообще говоря это должен быть Tl3TokenType, но там проблема с проверкой типов

PROCEDURE axiom:Push
 TOKEN IN aToken
 TOKEN_TYPE IN aTokenType

 %SUMMARY 'Запихивает во входной поток парсера токен aToken типизируя его в зависимости от aTokenType' ;

 aTokenType CASE
  Tl3TokenType::l3_ttSymbol 
   ( aToken Ctx:Parser:PushSymbol )
  Tl3TokenType::l3_ttString 
   ( aToken Ctx:Parser:PushString )
  Tl3TokenType::l3_ttInteger
   ( aToken Ctx:Parser:PushInt )
  DEFAULT 
   ( ERROR [ 'Неожиданный тип токена: ' aTokenType Tl3TokenType:ValueToName ] )
 end // aTokenType Case
; // axiom:Push

USES
 string.ms.dict
; 

PROCEDURE axiom:PushSerias
  STRING IN aWordInfo

 if ( aWordInfo IsNil ! ) then
 begin
  aWordInfo ' ' string:Split:for> Ctx:Parser:PushSymbol
 end
; // axiom:PushSerias

PROCEDURE axiom:PushWordInfo
  STRING IN aWordInfo

 aWordInfo axiom:PushSerias
; // axiom:PushWordInfo

MACRO in_param
  Literal IN aName

 TtfwWordInfo VAR l_WordInfo
 Ctx:WordInfo >>> l_WordInfo

 STRING VAR l_TypeInfo
 l_WordInfo pop:WordInfo:ToString >>> l_TypeInfo

 l_TypeInfo Msg

 Ctx:ClearTypeInfo
 
 l_TypeInfo CompileValue

 aName |N CompileValue
; // in_param

PROCEDURE axiom:Params:PushWithOtherStereo
  ENGINE_WORD IN aCaller
  STRING IN aStereo
  ENGINE_WORD IN aParams

 aParams CodeIterator .slice> 2 ==> ( 
  IN aTypes
  IN aParam 
  STRING VAR l_Stereo
  aParam pop:Word:Producer pop:Word:Name >>> l_Stereo
  STRING VAR l_WordInfoTypeName 
  aParam pop:Word:Info pop:WordInfo:TypeName >>> l_WordInfoTypeName
  l_WordInfoTypeName axiom:PushWordInfo
  aStereo axiom:PushSerias 
  aParam pop:Word:Name Ctx:Parser:PushSymbol  
 )
; // axiom:Params:PushWithOtherStereo

PROCEDURE axiom:Params:Push
  ENGINE_WORD IN aCaller
  ENGINE_WORD IN aParams

 aCaller 'IN' aParams axiom:Params:PushWithOtherStereo
; // axiom:Params:Push