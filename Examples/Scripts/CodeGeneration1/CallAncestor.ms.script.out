A
X
VOID TestWithDump CallAncestorTest
 IMMEDIATE VOID MACRO .call.ancestor
  TtfwWord VAR l_FoundWord
  STRING VAR l_WordName
  TtfwWord VAR l_WordParent
  Ctx:KeyWordDefiningNow
  pop:KeyWord:Name
  l_WordName
  pop:Word:SetValue
  l_WordName
  IsNil
  !
  ?ASSURE
  ARRAY [
   'No name for word calling '
   .call.ancestor
   pop:Word:Name
  ]
  Ctx:WordDefiningNow
  pop:Word:Parent
  l_WordParent
  pop:Word:SetValue
  l_WordParent
  IsNil
  !
  ?ASSURE
  ARRAY [
   'No parent for '
   l_WordName
  ]
  nil
  l_FoundWord
  pop:Word:SetValue
  l_WordParent
  .Inherited.Words
  (
   TtfwWord IN l_Ancestor
   TtfwWord VAR l_AncestorMember
   l_Ancestor
   pop:Word:Name
   .
   l_Ancestor
   %%
   l_WordName
   l_AncestorMember
   pop:Word:SetValue
   if
    (
     l_AncestorMember
     IsNil
     !
    )
   then
    BEGIN
     l_FoundWord
     IsNil
     ?ASSURE
     ARRAY [
      'Method '
      l_WordName
      ' was already found in '
      l_FoundWord
      pop:Word:Parent
      pop:Word:Name
     ]
     l_AncestorMember
     l_FoundWord
     pop:Word:SetValue
     l_FoundWord
     pop:Word:Name
     .
    END
  )
  SWAP
  Array:Iterate
 ; // IMMEDIATE VOID MACRO .call.ancestor
 
 : A
  : X
   INTEGER IN aValue
   aValue
   1
   +
  ; // : X
  
 ; // : A
 
 : B
  Inherits %G
   A
  ; // Inherits %G
  
  : X
   INTEGER IN aValue
   aValue
   2
   +
   A ::
   'X'
  ; // : X
  
 ; // : B
 
 CallAncestorTest
 DumpElement
 1
 A ::
 'X'
 .
 2
 B ::
 'X'
 .
; // VOID TestWithDump CallAncestorTest

2
5
