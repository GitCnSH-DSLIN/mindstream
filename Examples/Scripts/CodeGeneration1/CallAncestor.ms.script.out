VOID TestWithDump CallAncestorTest
 IMMEDIATE VOID MACRO .call.ancestor
  STRING VAR l_WordName
  Ctx:KeyWordDefiningNow
  pop:KeyWord:Name
  l_WordName
  pop:Word:SetValue
  l_WordName
  IsNil
  !
  ?ASSURE
  ARRAY [
   'No name for word calling '
   .call.ancestor
   pop:Word:Name
  ]
  l_WordName
  Ctx:WordDefiningNow
  .call.ancestor.do
 ; // IMMEDIATE VOID MACRO .call.ancestor
 
 VOID PROCEDURE .call.ancestor.do
  TtfwWord IN aWord
  STRING IN aWordName
  TtfwWord VAR l_FoundWord
  TtfwWord VAR l_WordParent
  aWord
  pop:Word:Parent
  l_WordParent
  pop:Word:SetValue
  l_WordParent
  IsNil
  !
  ?ASSURE
  ARRAY [
   'No parent for '
   aWordName
  ]
  aWordName
  l_WordParent
  .find.ancestor.method
  l_FoundWord
  pop:Word:SetValue
  l_FoundWord
  IsNil
  !
  ?ASSURE
  ARRAY [
   'Method '
   aWordName
   ' not found in '
   l_WordParent
   pop:Word:Name
  ]
  l_FoundWord
  CompileValue
 ; // VOID PROCEDURE .call.ancestor.do
 
 : .call.method
  TtfwWord IN aWhereToSearch
  STRING IN aWordName
  TtfwWord VAR l_Method
  aWordName
  aWhereToSearch
  .find.method
  l_Method
  pop:Word:SetValue
  l_Method
  IsNil
  ?FAIL
  ARRAY [
   'Method '
   aWordName
   ' not found in word '
   aWhereToSearch
   |N
  ]
  l_Method
  DO
 ; // : .call.method
 
 TtfwWord FUNCTION .find.ancestor.method
  TtfwWord IN aWhereToSearch
  STRING IN aWordName
  nil
  Result
  pop:Word:SetValue
  aWhereToSearch
  .Inherited.Words
  (
   TtfwWord IN l_Ancestor
   TtfwWord VAR l_AncestorMember
   l_Ancestor
   %%
   aWordName
   l_AncestorMember
   pop:Word:SetValue
   if
    (
     l_AncestorMember
     IsNil
     !
    )
   then
    BEGIN
     Result
     IsNil
     OR
     (
      l_AncestorMember
      =
      Result
     )
     ?ASSURE
     ARRAY [
      'Method '
      aWordName
      ' was already found in '
      Result
      pop:Word:Parent
      pop:Word:Name
     ]
     l_AncestorMember
     Result
     pop:Word:SetValue
    END
  )
  SWAP
  Array:Iterate
  if
   (
    Result
    IsNil
   )
  then
   BEGIN
    aWhereToSearch
    .Inherited.Words
    (
     TtfwWord IN anAncestor
     TtfwWord VAR l_Found
     aWordName
     anAncestor
     (
      .find.ancestor.method
      DO
     )
     l_Found
     pop:Word:SetValue
     l_Found
     Result
     pop:Word:SetValue
    )
    SWAP
    Array:Iterate
   END
 ; // TtfwWord FUNCTION .find.ancestor.method
 
 TtfwWord FUNCTION .find.method
  TtfwWord IN aWhereToSearch
  STRING IN aWordName
  aWhereToSearch
  %%
  aWordName
  Result
  pop:Word:SetValue
  if
   (
    Result
    IsNil
   )
  then
   BEGIN
    aWordName
    aWhereToSearch
    .find.ancestor.method
    Result
    pop:Word:SetValue
   END
 ; // TtfwWord FUNCTION .find.method
 
 : ?->
  ^@ IN aWhereToSearch
  ^L IN aWordName
  aWordName
  |N
  aWhereToSearch
  .call.method
 ; // : ?->
 
 : A
  : X
   INTEGER IN aValue
   aValue
   1
   +
  ; // : X
  
 ; // : A
 
 : B
  Inherits %G
   A
  ; // Inherits %G
  
  : X
   INTEGER IN aValue
   aValue
   2
   +
   X
  ; // : X
  
 ; // : B
 
 : C
  Inherits %G
   B
  ; // Inherits %G
  
 ; // : C
 
 : D
  Inherits %G
   C
  ; // Inherits %G
  
  : X
   INTEGER IN aValue
   aValue
   4
   +
   X
  ; // : X
  
 ; // : D
 
 : E
  Inherits %G
   C
  ; // Inherits %G
  
  : X
   INTEGER IN aValue
   aValue
   5
   +
   X
  ; // : X
  
 ; // : E
 
 CallAncestorTest
 DumpElement
 1
 A ?->
 'X'
 .
 2
 B ?->
 'X'
 .
 3
 C ?->
 'X'
 .
 4
 D ::
 'X'
 .
 5
 E ::
 'X'
 .
; // VOID TestWithDump CallAncestorTest

2
5
6
11
13
