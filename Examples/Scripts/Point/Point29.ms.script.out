[ 0 0 ]
[ 0 0 ]
[ 1 1 ]
[ 2 2 ]
[ 2 2 ]
[ 3 3 ]
[ -1 -1 ]
[ 1 1 ]
[ -2 -2 ]
[ -1 -1 ]
VOID Test PointTest
 INTEGER CONST c:Point:CoordCount
  2
 IMMEDIATE VOID OPERATOR class
  ^L IN aName
  'Object'
  Ctx:Parser:PushSymbol
  'type'
  Ctx:Parser:PushSymbol
  aName
  |N
  Ctx:Parser:PushSymbol
 ; // IMMEDIATE VOID OPERATOR class
 
 IMMEDIATE VOID OPERATOR constructor
  ^L IN aName
  constructor
  Ctx:SetWordProducerForCompiledClass
  ':'
  Ctx:Parser:PushSymbol
  aName
  |N
  Ctx:Parser:PushSymbol
 ; // IMMEDIATE VOID OPERATOR constructor
 
 IMMEDIATE VOID TYPE FieldOffset
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID TYPE FieldOffset
 
 IMMEDIATE VOID TYPE Object
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID TYPE Object
 
 Point VAR P1
 Point VAR P10
 Point VAR P2
 Point VAR P3
 Point VAR P4
 Point VAR P5
 Point VAR P6
 Point VAR P7
 Point VAR P8
 Point VAR P9
 IMMEDIATE VOID TYPE Pixel
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID TYPE Pixel
 
 IMMEDIATE VOID TYPE PixelList
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID TYPE PixelList
 
 IMMEDIATE VOID TYPE Point
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID TYPE Point
 
 Point constructor Point:
  ^ IN _aX
  ^ IN _aY
  ^ IN _aX
  ^ IN _aY
  [
   _aX |^
   _aY |^
  ]
  >>>
  Result
 ; // Point constructor Point:
 
 Point : Point:-
  ^ IN _aPoint
  ^ IN _aPoint
  FieldOffset VAR i
  Point IN Self
  i :=
  0
  [
   for
   (
    _aPoint |@
    DO
   )
   (
    Pixel IN aPx
    aPx
    i
    Self
    Array:GetItem
    SWAP
    -
    INC
    i
   )
  ]
  >>>
  Result
 ; // Point : Point:-
 
 Point : Point:+
  ^ IN _aPoint
  ^ IN _aPoint
  FieldOffset VAR i
  Point IN Self
  i :=
  0
  [
   for
   (
    _aPoint |@
    DO
   )
   (
    Pixel IN aPx
    aPx
    i
    Self
    Array:GetItem
    +
    INC
    i
   )
  ]
  >>>
  Result
 ; // Point : Point:+
 
 Point constructor Point:0
  [
   0
   0
  ]
  >>>
  Result
 ; // Point constructor Point:0
 
 Point : Point:Neg
  Point IN Self
  [
   for
   Self
   (
    Pixel IN aPx
    aPx
    0
    SWAP
    -
   )
  ]
  >>>
  Result
 ; // Point : Point:Neg
 
 Point constructor Point:OF
  ^ IN _aPoint
  ^ IN _aPoint
  [
   for
   (
    _aPoint |@
    DO
   )
   (
    Pixel IN aPx
    aPx
   )
  ]
  >>>
  Result
  (
   Result
   Array:Count
   =
   c:Point:CoordCount
  )
  ?ASSURE
  '“очка должна содержать две координаты'
 ; // Point constructor Point:OF
 
 VOID : Point:Print
  Point IN aPoint
  aPoint
  .
 ; // VOID : Point:Print
 
 Point constructor Point:XY
  ^ IN _aPoint
  ^ IN _aPoint
  [
   _aPoint |@
   DO
  ]
  >>>
  Result
  (
   Result
   Array:Count
   =
   c:Point:CoordCount
  )
  ?ASSURE
  '“очка должна содержать две координаты'
 ; // Point constructor Point:XY
 
 P1 :=
 Point:0
 P2 :=
 Point:0
 P3 :=
 Point:
 1
 1
 P4 :=
 Point:XY
 (
  2
  2
 )
 P5 :=
 Point:OF
 P4
 P6 :=
 (
  P3
  Point:+
  P4
 )
 P7 :=
 (
  P3
  Point:-
  P4
 )
 P8 :=
 (
  P4
  Point:-
  P3
 )
 P9 :=
 (
  P4
  Point:Neg
 )
 P10 :=
 (
  P3
  Point:Neg
 )
 P1
 Point:Print
 P2
 Point:Print
 P3
 Point:Print
 P4
 Point:Print
 P5
 Point:Print
 P6
 Point:Print
 P7
 Point:Print
 P8
 Point:Print
 P9
 Point:Print
 P10
 Point:Print
 PointTest
 DumpElement
; // VOID Test PointTest

