[ 0 0 ]
[ 0 0 ]
[ 1 1 ]
[ 2 2 ]
[ 2 2 ]
[ 3 3 ]
[ -1 -1 ]
[ 1 1 ]
[ -2 -2 ]
[ -1 -1 ]
VOID Test PointTest
 TYPE _Object_
 ; // TYPE _Object_
 
 TYPE _Point_
 ; // TYPE _Point_
 
 INTEGER CONST c:Point:CoordCount
  2
 IMMEDIATE VOID OPERATOR class
  ^L IN aName
  'array'
  Ctx:Parser:PushSymbol
  'type'
  Ctx:Parser:PushSymbol
  aName
  |N
  Ctx:Parser:PushSymbol
  ':'
  Ctx:Parser:PushSymbol
  [
   '_'
   aName
   |N
   '_'
  ]
  strings:Cat
  Ctx:Parser:PushSymbol
  ';'
  Ctx:Parser:PushSymbol
 ; // IMMEDIATE VOID OPERATOR class
 
 VOID OPERATOR class_impl
 ; // VOID OPERATOR class_impl
 
 IMMEDIATE VOID OPERATOR constructor
  ^L IN aName
  constructor
  Ctx:SetWordProducerForCompiledClass
  ':'
  Ctx:Parser:PushSymbol
  aName
  |N
  Ctx:Parser:PushSymbol
 ; // IMMEDIATE VOID OPERATOR constructor
 
 IMMEDIATE VOID TYPE FieldOffset
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID TYPE FieldOffset
 
 IMMEDIATE VOID OPERATOR method
  ^L IN aName
  method
  Ctx:SetWordProducerForCompiledClass
  ':'
  Ctx:Parser:PushSymbol
  aName
  |N
  Ctx:Parser:PushSymbol
 ; // IMMEDIATE VOID OPERATOR method
 
 IMMEDIATE VOID OPERATOR Object
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID OPERATOR Object
 
 ARRAY VAR P1
 ARRAY VAR P10
 ARRAY VAR P2
 ARRAY VAR P3
 ARRAY VAR P4
 ARRAY VAR P5
 ARRAY VAR P6
 ARRAY VAR P7
 ARRAY VAR P8
 ARRAY VAR P9
 IMMEDIATE VOID TYPE Pixel
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID TYPE Pixel
 
 IMMEDIATE VOID TYPE PixelList
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID TYPE PixelList
 
 IMMEDIATE VOID OPERATOR Point
  TtfwValueTypes
  Ctx:IncludeValueTypes
 ; // IMMEDIATE VOID OPERATOR Point
 
 ARRAY constructor Point:
  ^ IN aX
  ^ IN aY
  [
   aX |^
   aY |^
  ]
  >>>
  Result
 ; // ARRAY constructor Point:
 
 ARRAY method Point:-
  ^ IN aPoint
  INTEGER VAR i
  ARRAY IN Self
  i :=
  0
  [
   for
   (
    aPoint |@
    DO
   )
   (
    INTEGER IN aPx
    aPx
    i
    Self
    [i]
    SWAP
    -
    INC
    i
   )
  ]
  >>>
  Result
 ; // ARRAY method Point:-
 
 ARRAY method Point:+
  ^ IN aPoint
  INTEGER VAR i
  ARRAY IN Self
  i :=
  0
  [
   for
   (
    aPoint |@
    DO
   )
   (
    INTEGER IN aPx
    aPx
    i
    Self
    [i]
    +
    INC
    i
   )
  ]
  >>>
  Result
 ; // ARRAY method Point:+
 
 ARRAY constructor Point:0
  [
   0
   0
  ]
  >>>
  Result
 ; // ARRAY constructor Point:0
 
 ARRAY method Point:Neg
  ARRAY IN Self
  [
   for
   Self
   (
    INTEGER IN aPx
    aPx
    0
    SWAP
    -
   )
  ]
  >>>
  Result
 ; // ARRAY method Point:Neg
 
 ARRAY constructor Point:OF
  ^ IN aPoint
  [
   for
   (
    aPoint |@
    DO
   )
   (
    INTEGER IN aPx
    aPx
   )
  ]
  >>>
  Result
  (
   Result
   Array:Count
   =
   c:Point:CoordCount
  )
  ?ASSURE
  '“очка должна содержать две координаты'
 ; // ARRAY constructor Point:OF
 
 VOID method Point:Print
  ARRAY IN aPoint
  aPoint
  .
 ; // VOID method Point:Print
 
 ARRAY constructor Point:XY
  ^ IN aPoint
  [
   aPoint |@
   DO
  ]
  >>>
  Result
  (
   Result
   Array:Count
   =
   c:Point:CoordCount
  )
  ?ASSURE
  '“очка должна содержать две координаты'
 ; // ARRAY constructor Point:XY
 
 P1 :=
 Point:0
 P2 :=
 Point:0
 P3 :=
 Point:
 1
 1
 P4 :=
 Point:XY
 (
  2
  2
 )
 P5 :=
 Point:OF
 P4
 P6 :=
 (
  P3
  Point:+
  P4
 )
 P7 :=
 (
  P3
  Point:-
  P4
 )
 P8 :=
 (
  P4
  Point:-
  P3
 )
 P9 :=
 (
  P4
  Point:Neg
 )
 P10 :=
 (
  P3
  Point:Neg
 )
 P1
 Point:Print
 P2
 Point:Print
 P3
 Point:Print
 P4
 Point:Print
 P5
 Point:Print
 P6
 Point:Print
 P7
 Point:Print
 P8
 Point:Print
 P9
 Point:Print
 P10
 Point:Print
 PointTest
 DumpElement
; // VOID Test PointTest

